<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ Assembly name="$(TargetDir)\Swifter.Core.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="Swifter.Tools" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>

<#

	var serializes = new []
	{
		new { ReturnType = "string", ReturnDescription = "Json 字符串", ParameterType = "", ParameterName = "", ParameterDescription = "", IsAsync = false, IsOptions = false, IsStatic = true, IsEncoding = false },

		new { ReturnType = "string", ReturnDescription = "Json 字符串", ParameterType ="", ParameterName = "", ParameterDescription = "", IsAsync = false, IsOptions = true, IsStatic = true, IsEncoding = false },
		new { ReturnType = "void", ReturnDescription = "", ParameterType = "HGlobalCache<char>", ParameterName = "hGCache", ParameterDescription = "Json 缓存", IsAsync = false, IsOptions = true, IsStatic = true, IsEncoding = false },
		new { ReturnType = "void", ReturnDescription = "", ParameterType = "TextWriter", ParameterName = "textWriter", ParameterDescription = "Json 写入器", IsAsync = false, IsOptions = true, IsStatic = true, IsEncoding = false },

		new { ReturnType = "void", ReturnDescription = "", ParameterType = "TextWriter", ParameterName = "textWriter", ParameterDescription = "Json 写入器", IsAsync = true, IsOptions = false, IsStatic = true, IsEncoding = false },
		new { ReturnType = "void", ReturnDescription = "", ParameterType = "TextWriter", ParameterName = "textWriter", ParameterDescription = "Json 写入器", IsAsync = true, IsOptions = true, IsStatic = true, IsEncoding = false },



		new { ReturnType = "byte[]", ReturnDescription = "Json 字节数组", ParameterType = "", ParameterName = "", ParameterDescription = "", IsAsync = false, IsOptions = false, IsStatic = true, IsEncoding = true },
		new { ReturnType = "void", ReturnDescription = "", ParameterType = "HGlobalCache<byte>", ParameterName = "hGCache", ParameterDescription = "Json 字节缓存", IsAsync = false, IsOptions = false, IsStatic = true, IsEncoding = true },
		new { ReturnType = "void", ReturnDescription = "", ParameterType = "Stream", ParameterName = "stream", ParameterDescription = "Json 输出流", IsAsync = false, IsOptions = false, IsStatic = true, IsEncoding = true },

		new { ReturnType = "byte[]", ReturnDescription = "Json 字节数组", ParameterType ="", ParameterName = "", ParameterDescription = "", IsAsync = false, IsOptions = true, IsStatic = true, IsEncoding = true },
		new { ReturnType = "void", ReturnDescription = "", ParameterType = "HGlobalCache<byte>", ParameterName = "hGCache", ParameterDescription = "Json 字节缓存", IsAsync = false, IsOptions = true, IsStatic = true, IsEncoding = true },
		new { ReturnType = "void", ReturnDescription = "", ParameterType = "Stream", ParameterName = "stream", ParameterDescription = "Json 输出流", IsAsync = false, IsOptions = true, IsStatic = true, IsEncoding = true },

		new { ReturnType = "void", ReturnDescription = "", ParameterType = "Stream", ParameterName = "stream", ParameterDescription = "Json 输出流", IsAsync = true, IsOptions = false, IsStatic = true, IsEncoding = true },
		new { ReturnType = "void", ReturnDescription = "", ParameterType = "Stream", ParameterName = "stream", ParameterDescription = "Json 输出流", IsAsync = true, IsOptions = true, IsStatic = true, IsEncoding = true },


		new { ReturnType = "string", ReturnDescription = "Json 字符串", ParameterType = "", ParameterName = "", ParameterDescription = "", IsAsync = false, IsOptions = false, IsStatic = false, IsEncoding = false },
		new { ReturnType = "void", ReturnDescription = "", ParameterType = "HGlobalCache<char>", ParameterName = "hGCache", ParameterDescription = "Json 缓存", IsAsync = false, IsOptions = false, IsStatic = false, IsEncoding = false },
		new { ReturnType = "void", ReturnDescription = "", ParameterType = "TextWriter", ParameterName = "textWriter", ParameterDescription = "Json 写入器", IsAsync = false, IsOptions = false, IsStatic = false, IsEncoding = false },


		new { ReturnType = "void", ReturnDescription = "", ParameterType = "TextWriter", ParameterName = "textWriter", ParameterDescription = "Json 写入器", IsAsync = true, IsOptions = false, IsStatic = false, IsEncoding = false },
		
		new { ReturnType = "void", ReturnDescription = "", ParameterType = "out byte[]", ParameterName = "bytes", ParameterDescription = "Json 字节数组", IsAsync = false, IsOptions = false, IsStatic = false, IsEncoding = true },
		new { ReturnType = "void", ReturnDescription = "", ParameterType = "HGlobalCache<byte>", ParameterName = "hGCache", ParameterDescription = "Json 字节缓存", IsAsync = false, IsOptions = false, IsStatic = false, IsEncoding = true },
		new { ReturnType = "void", ReturnDescription = "", ParameterType = "Stream", ParameterName = "stream", ParameterDescription = "Json 输出流", IsAsync = false, IsOptions = false, IsStatic = false, IsEncoding = true },

		new { ReturnType = "void", ReturnDescription = "", ParameterType = "Stream", ParameterName = "stream", ParameterDescription = "Json 输出流", IsAsync = true, IsOptions = false, IsStatic = false, IsEncoding = true },
		
	};

	var deserializes = new []
	{
		new { ParameterType = "string", ParameterName = "text", ParameterDescription = "Json 字符串", IsCore = false, IsGeneric = false, IsAsync = false, IsOptions = false, IsStatic = true, IsEncoding = false },
		new { ParameterType = "HGlobalCache<char>", ParameterName = "hGCache", ParameterDescription = "Json 缓存", IsCore = false, IsGeneric = false, IsAsync = false, IsOptions = false, IsStatic = true, IsEncoding = false },
		new { ParameterType = "TextReader", ParameterName = "textReader", ParameterDescription = "Json 读取器", IsCore = false, IsGeneric = false, IsAsync = false, IsOptions = false, IsStatic = true, IsEncoding = false },
		new { ParameterType = "ReadOnlySpan<char>", ParameterName = "text", ParameterDescription = "Json 字符串", IsCore = true, IsGeneric = false, IsAsync = false, IsOptions = false, IsStatic = true, IsEncoding = false },
		new { ParameterType = "string", ParameterName = "text", ParameterDescription = "Json 字符串", IsCore = false, IsGeneric = true, IsAsync = false, IsOptions = false, IsStatic = true, IsEncoding = false },
		new { ParameterType = "HGlobalCache<char>", ParameterName = "hGCache", ParameterDescription = "Json 缓存", IsCore = false, IsGeneric = true, IsAsync = false, IsOptions = false, IsStatic = true, IsEncoding = false },
		new { ParameterType = "TextReader", ParameterName = "textReader", ParameterDescription = "Json 读取器", IsCore = false, IsGeneric = true, IsAsync = false, IsOptions = false, IsStatic = true, IsEncoding = false },
		new { ParameterType = "ReadOnlySpan<char>", ParameterName = "text", ParameterDescription = "Json 字符串", IsCore = true, IsGeneric = true, IsAsync = false, IsOptions = false, IsStatic = true, IsEncoding = false },
		new { ParameterType = "TextReader", ParameterName = "textReader", ParameterDescription = "Json 读取器", IsCore = false, IsGeneric = true, IsAsync = true, IsOptions = false, IsStatic = true, IsEncoding = false },
		new { ParameterType = "TextReader", ParameterName = "textReader", ParameterDescription = "Json 读取器", IsCore = false, IsGeneric = false, IsAsync = true, IsOptions = false, IsStatic = true, IsEncoding = false },

		new { ParameterType = "string", ParameterName = "text", ParameterDescription = "Json 字符串", IsCore = false, IsGeneric = false, IsAsync = false, IsOptions = true, IsStatic = true, IsEncoding = false },
		new { ParameterType = "HGlobalCache<char>", ParameterName = "hGCache", ParameterDescription = "Json 缓存", IsCore = false, IsGeneric = false, IsAsync = false, IsOptions = true, IsStatic = true, IsEncoding = false },
		new { ParameterType = "TextReader", ParameterName = "textReader", ParameterDescription = "Json 读取器", IsCore = false, IsGeneric = false, IsAsync = false, IsOptions = true, IsStatic = true, IsEncoding = false },
		new { ParameterType = "ReadOnlySpan<char>", ParameterName = "text", ParameterDescription = "Json 字符串", IsCore = true, IsGeneric = false, IsAsync = false, IsOptions = true, IsStatic = true, IsEncoding = false },
		new { ParameterType = "string", ParameterName = "text", ParameterDescription = "Json 字符串", IsCore = false, IsGeneric = true, IsAsync = false, IsOptions = true, IsStatic = true, IsEncoding = false },
		new { ParameterType = "HGlobalCache<char>", ParameterName = "hGCache", ParameterDescription = "Json 缓存", IsCore = false, IsGeneric = true, IsAsync = false, IsOptions = true, IsStatic = true, IsEncoding = false },
		new { ParameterType = "TextReader", ParameterName = "textReader", ParameterDescription = "Json 读取器", IsCore = false, IsGeneric = true, IsAsync = false, IsOptions = true, IsStatic = true, IsEncoding = false },
		new { ParameterType = "ReadOnlySpan<char>", ParameterName = "text", ParameterDescription = "Json 字符串", IsCore = true, IsGeneric = true, IsAsync = false, IsOptions = true, IsStatic = true, IsEncoding = false },
		new { ParameterType = "TextReader", ParameterName = "textReader", ParameterDescription = "Json 读取器", IsCore = false, IsGeneric = true, IsAsync = true, IsOptions = true, IsStatic = true, IsEncoding = false },
		new { ParameterType = "TextReader", ParameterName = "textReader", ParameterDescription = "Json 读取器", IsCore = false, IsGeneric = false, IsAsync = true, IsOptions = true, IsStatic = true, IsEncoding = false },

		
		new { ParameterType = "string", ParameterName = "text", ParameterDescription = "Json 字符串", IsCore = false, IsGeneric = false, IsAsync = false, IsOptions = false, IsStatic = false, IsEncoding = false },
		new { ParameterType = "HGlobalCache<char>", ParameterName = "hGCache", ParameterDescription = "Json 缓存", IsCore = false, IsGeneric = false, IsAsync = false, IsOptions = false, IsStatic = false, IsEncoding = false },
		new { ParameterType = "TextReader", ParameterName = "textReader", ParameterDescription = "Json 读取器", IsCore = false, IsGeneric = false, IsAsync = false, IsOptions = false, IsStatic = false, IsEncoding = false },
		new { ParameterType = "ReadOnlySpan<char>", ParameterName = "text", ParameterDescription = "Json 字符串", IsCore = true, IsGeneric = false, IsAsync = false, IsOptions = false, IsStatic = false, IsEncoding = false },
		new { ParameterType = "string", ParameterName = "text", ParameterDescription = "Json 字符串", IsCore = false, IsGeneric = true, IsAsync = false, IsOptions = false, IsStatic = false, IsEncoding = false },
		new { ParameterType = "HGlobalCache<char>", ParameterName = "hGCache", ParameterDescription = "Json 缓存", IsCore = false, IsGeneric = true, IsAsync = false, IsOptions = false, IsStatic = false, IsEncoding = false },
		new { ParameterType = "TextReader", ParameterName = "textReader", ParameterDescription = "Json 读取器", IsCore = false, IsGeneric = true, IsAsync = false, IsOptions = false, IsStatic = false, IsEncoding = false },
		new { ParameterType = "ReadOnlySpan<char>", ParameterName = "text", ParameterDescription = "Json 字符串", IsCore = true, IsGeneric = true, IsAsync = false, IsOptions = false, IsStatic = false, IsEncoding = false },
		new { ParameterType = "TextReader", ParameterName = "textReader", ParameterDescription = "Json 读取器", IsCore = false, IsGeneric = true, IsAsync = true, IsOptions = false, IsStatic = false, IsEncoding = false },
		new { ParameterType = "TextReader", ParameterName = "textReader", ParameterDescription = "Json 读取器", IsCore = false, IsGeneric = false, IsAsync = true, IsOptions = false, IsStatic = false, IsEncoding = false },





		
		new { ParameterType = "ArraySegment<byte>", ParameterName = "bytes", ParameterDescription = "Json 字节数组", IsCore = false, IsGeneric = false, IsAsync = false, IsOptions = false, IsStatic = true, IsEncoding = true },
		new { ParameterType = "byte[]", ParameterName = "bytes", ParameterDescription = "Json 字节数组", IsCore = false, IsGeneric = false, IsAsync = false, IsOptions = false, IsStatic = true, IsEncoding = true },
		new { ParameterType = "HGlobalCache<byte>", ParameterName = "hGCache", ParameterDescription = "Json 字节缓存", IsCore = false, IsGeneric = false, IsAsync = false, IsOptions = false, IsStatic = true, IsEncoding = true },
		new { ParameterType = "Stream", ParameterName = "stream", ParameterDescription = "Json 输入流", IsCore = false, IsGeneric = false, IsAsync = false, IsOptions = false, IsStatic = true, IsEncoding = true },
		new { ParameterType = "ReadOnlySpan<byte>", ParameterName = "bytes", ParameterDescription = "Json 字节数组", IsCore = true, IsGeneric = false, IsAsync = false, IsOptions = false, IsStatic = true, IsEncoding = true },
		new { ParameterType = "ArraySegment<byte>", ParameterName = "bytes", ParameterDescription = "Json 字节数组", IsCore = false, IsGeneric = true, IsAsync = false, IsOptions = false, IsStatic = true, IsEncoding = true },
		new { ParameterType = "byte[]", ParameterName = "bytes", ParameterDescription = "Json 字节数组", IsCore = false, IsGeneric = true, IsAsync = false, IsOptions = false, IsStatic = true, IsEncoding = true },
		new { ParameterType = "HGlobalCache<byte>", ParameterName = "hGCache", ParameterDescription = "Json 字节缓存", IsCore = false, IsGeneric = true, IsAsync = false, IsOptions = false, IsStatic = true, IsEncoding = true },
		new { ParameterType = "Stream", ParameterName = "stream", ParameterDescription = "Json 输入流", IsCore = false, IsGeneric = true, IsAsync = false, IsOptions = false, IsStatic = true, IsEncoding = true },
		new { ParameterType = "ReadOnlySpan<byte>", ParameterName = "bytes", ParameterDescription = "Json 字节数组", IsCore = true, IsGeneric = true, IsAsync = false, IsOptions = false, IsStatic = true, IsEncoding = true },
		new { ParameterType = "Stream", ParameterName = "stream", ParameterDescription = "Json 输入流", IsCore = false, IsGeneric = true, IsAsync = true, IsOptions = false, IsStatic = true, IsEncoding = true },
		new { ParameterType = "Stream", ParameterName = "stream", ParameterDescription = "Json 输入流", IsCore = false, IsGeneric = false, IsAsync = true, IsOptions = false, IsStatic = true, IsEncoding = true },

		new { ParameterType = "ArraySegment<byte>", ParameterName = "bytes", ParameterDescription = "Json 字节数组", IsCore = false, IsGeneric = false, IsAsync = false, IsOptions = true, IsStatic = true, IsEncoding = true },
		new { ParameterType = "byte[]", ParameterName = "bytes", ParameterDescription = "Json 字节数组", IsCore = false, IsGeneric = false, IsAsync = false, IsOptions = true, IsStatic = true, IsEncoding = true },
		new { ParameterType = "HGlobalCache<byte>", ParameterName = "hGCache", ParameterDescription = "Json 字节缓存", IsCore = false, IsGeneric = false, IsAsync = false, IsOptions = true, IsStatic = true, IsEncoding = true },
		new { ParameterType = "Stream", ParameterName = "stream", ParameterDescription = "Json 输入流", IsCore = false, IsGeneric = false, IsAsync = false, IsOptions = true, IsStatic = true, IsEncoding = true },
		new { ParameterType = "ReadOnlySpan<byte>", ParameterName = "bytes", ParameterDescription = "Json 字节数组", IsCore = true, IsGeneric = false, IsAsync = false, IsOptions = true, IsStatic = true, IsEncoding = true },
		new { ParameterType = "ArraySegment<byte>", ParameterName = "bytes", ParameterDescription = "Json 字节数组", IsCore = false, IsGeneric = true, IsAsync = false, IsOptions = true, IsStatic = true, IsEncoding = true },
		new { ParameterType = "byte[]", ParameterName = "bytes", ParameterDescription = "Json 字节数组", IsCore = false, IsGeneric = true, IsAsync = false, IsOptions = true, IsStatic = true, IsEncoding = true },
		new { ParameterType = "HGlobalCache<byte>", ParameterName = "hGCache", ParameterDescription = "Json 字节缓存", IsCore = false, IsGeneric = true, IsAsync = false, IsOptions = true, IsStatic = true, IsEncoding = true },
		new { ParameterType = "Stream", ParameterName = "stream", ParameterDescription = "Json 输入流", IsCore = false, IsGeneric = true, IsAsync = false, IsOptions = true, IsStatic = true, IsEncoding = true },
		new { ParameterType = "ReadOnlySpan<byte>", ParameterName = "bytes", ParameterDescription = "Json 字节数组", IsCore = true, IsGeneric = true, IsAsync = false, IsOptions = true, IsStatic = true, IsEncoding = true },
		new { ParameterType = "Stream", ParameterName = "stream", ParameterDescription = "Json 输入流", IsCore = false, IsGeneric = true, IsAsync = true, IsOptions = true, IsStatic = true, IsEncoding = true },
		new { ParameterType = "Stream", ParameterName = "stream", ParameterDescription = "Json 输入流", IsCore = false, IsGeneric = false, IsAsync = true, IsOptions = true, IsStatic = true, IsEncoding = true },

		
		new { ParameterType = "ArraySegment<byte>", ParameterName = "bytes", ParameterDescription = "Json 字节数组", IsCore = false, IsGeneric = false, IsAsync = false, IsOptions = false, IsStatic = false, IsEncoding = true },
		new { ParameterType = "byte[]", ParameterName = "bytes", ParameterDescription = "Json 字节数组", IsCore = false, IsGeneric = false, IsAsync = false, IsOptions = false, IsStatic = false, IsEncoding = true },
		new { ParameterType = "HGlobalCache<byte>", ParameterName = "hGCache", ParameterDescription = "Json 字节缓存", IsCore = false, IsGeneric = false, IsAsync = false, IsOptions = false, IsStatic = false, IsEncoding = true },
		new { ParameterType = "Stream", ParameterName = "stream", ParameterDescription = "Json 输入流", IsCore = false, IsGeneric = false, IsAsync = false, IsOptions = false, IsStatic = false, IsEncoding = true },
		new { ParameterType = "ReadOnlySpan<byte>", ParameterName = "bytes", ParameterDescription = "Json 字节数组", IsCore = true, IsGeneric = false, IsAsync = false, IsOptions = false, IsStatic = false, IsEncoding = true },
		new { ParameterType = "ArraySegment<byte>", ParameterName = "bytes", ParameterDescription = "Json 字节数组", IsCore = false, IsGeneric = true, IsAsync = false, IsOptions = false, IsStatic = false, IsEncoding = true },
		new { ParameterType = "byte[]", ParameterName = "bytes", ParameterDescription = "Json 字节数组", IsCore = false, IsGeneric = true, IsAsync = false, IsOptions = false, IsStatic = false, IsEncoding = true },
		new { ParameterType = "HGlobalCache<byte>", ParameterName = "hGCache", ParameterDescription = "Json 字节缓存", IsCore = false, IsGeneric = true, IsAsync = false, IsOptions = false, IsStatic = false, IsEncoding = true },
		new { ParameterType = "Stream", ParameterName = "stream", ParameterDescription = "Json 输入流", IsCore = false, IsGeneric = true, IsAsync = false, IsOptions = false, IsStatic = false, IsEncoding = true },
		new { ParameterType = "ReadOnlySpan<byte>", ParameterName = "bytes", ParameterDescription = "Json 字节数组", IsCore = true, IsGeneric = true, IsAsync = false, IsOptions = false, IsStatic = false, IsEncoding = true },
		new { ParameterType = "Stream", ParameterName = "stream", ParameterDescription = "Json 输入流", IsCore = false, IsGeneric = true, IsAsync = true, IsOptions = false, IsStatic = false, IsEncoding = true },
		new { ParameterType = "Stream", ParameterName = "stream", ParameterDescription = "Json 输入流", IsCore = false, IsGeneric = false, IsAsync = true, IsOptions = false, IsStatic = false, IsEncoding = true },
	};

	var deserializetos = new []
	{
		new { ParameterType = "string", ParameterName = "text", ParameterDescription = "Json 字符串", IsCore = false, IsGeneric = false, IsAsync = false, IsOptions = false, IsStatic = false, IsEncoding = false },
		new { ParameterType = "HGlobalCache<char>", ParameterName = "hGCache", ParameterDescription = "Json 缓存", IsCore = false, IsGeneric = false, IsAsync = false, IsOptions = false, IsStatic = false, IsEncoding = false },
		new { ParameterType = "TextReader", ParameterName = "textReader", ParameterDescription = "Json 读取器", IsCore = false, IsGeneric = false, IsAsync = false, IsOptions = false, IsStatic = false, IsEncoding = false },
		new { ParameterType = "ReadOnlySpan<char>", ParameterName = "text", ParameterDescription = "Json 字符串", IsCore = true, IsGeneric = false, IsAsync = false, IsOptions = false, IsStatic = false, IsEncoding = false },
		new { ParameterType = "TextReader", ParameterName = "textReader", ParameterDescription = "Json 读取器", IsCore = false, IsGeneric = false, IsAsync = true, IsOptions = false, IsStatic = false, IsEncoding = false },

		new { ParameterType = "ArraySegment<byte>", ParameterName = "bytes", ParameterDescription = "Json 字节数组", IsCore = false, IsGeneric = false, IsAsync = false, IsOptions = false, IsStatic = false, IsEncoding = true },
		new { ParameterType = "HGlobalCache<byte>", ParameterName = "hGCache", ParameterDescription = "Json 字节缓存", IsCore = false, IsGeneric = false, IsAsync = false, IsOptions = false, IsStatic = false, IsEncoding = true },
		new { ParameterType = "Stream", ParameterName = "stream", ParameterDescription = "Json 输入流", IsCore = false, IsGeneric = false, IsAsync = false, IsOptions = false, IsStatic = false, IsEncoding = true },
		new { ParameterType = "ReadOnlySpan<byte>", ParameterName = "bytes", ParameterDescription = "Json 字节数组", IsCore = true, IsGeneric = false, IsAsync = false, IsOptions = false, IsStatic = false, IsEncoding = true },
		new { ParameterType = "Stream", ParameterName = "stream", ParameterDescription = "Json 输入流", IsCore = false, IsGeneric = false, IsAsync = true, IsOptions = false, IsStatic = false, IsEncoding = true },
	};
#>



using Swifter.RW;
using Swifter.Tools;
using System;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;

#if Async

using System.Threading.Tasks;

#endif

namespace Swifter.Json
{

	partial class JsonFormatter
	{
<# { #>
<# foreach(var serialize in serializes) { #>
<#= serialize.IsAsync ? "#if Async" : "" #>

<# var parameter_list = "T value"; #>
<# var method_name = "Serialize"; #>
<# var result = serialize.ReturnType; #>
<# var options_parameter = ""; #>
<# var encoding_name = ""; #>
<# var encoding_parameter = ""; #>
<# if (serialize.IsOptions) { options_parameter = ", options"; } #>
<# if (serialize.IsAsync) { result = result == "void" ? @"async
#if ValueTask
        ValueTask
#else
        Task
#endif
       " : @$"async
#if ValueTask
        ValueTask<{result}>
#else
        Task<{result}>
#endif
	   "; } #>
<# if (serialize.IsStatic) { result = $"static {result}"; method_name += "Object"; } #>
<# if (!string.IsNullOrEmpty(serialize.ParameterType) && !string.IsNullOrEmpty(serialize.ParameterName)) { parameter_list += $", {serialize.ParameterType} {serialize.ParameterName}"; } #>
<# if (serialize.IsEncoding) { encoding_name = "Encoding"; encoding_parameter = ", Encoding"; } #>
<# if (serialize.IsEncoding && serialize.IsStatic) { parameter_list += ", Encoding encoding"; encoding_name = "encoding"; encoding_parameter = ", encoding"; } #>
<# if (serialize.IsOptions) { parameter_list += ", JsonFormatterOptions options"; } #>

        /// <summary>
<# if (!string.IsNullOrEmpty(serialize.ReturnDescription)) { #>
        /// 将指定类型的实例序列化为 <#= serialize.ReturnDescription #>。
<# } else { #>
        /// 将指定类型的实例序列化到 <#= serialize.ParameterDescription #>中。
<# } #>
        /// </summary>
        /// <typeparam name="T">指定类型</typeparam>
        /// <param name="value">指定类型的实例</param>
<# if (!string.IsNullOrEmpty(serialize.ParameterDescription)) { #>
		/// <param name="<#= serialize.ParameterName #>"><#= serialize.ParameterDescription #></param>
<# } #>
<# if (serialize.IsEncoding && serialize.IsStatic) { #>
		/// <param name="encoding">指定编码</param>
<# } #>
<# if (serialize.IsOptions) { #>
		/// <param name="options">指定配置项</param>
<# } #>
        [MethodImpl(VersionDifferences.AggressiveInlining)]
        public <#= result #> <#= method_name #><#= serialize.IsAsync ? "Async" : "" #><T>(<#= parameter_list #>)
        {
<# if (serialize.ReturnType == "string") { #>
			var hGChars = CharsPool.Rent();

			<#= method_name #>(value, hGChars<#= options_parameter#>);
			
			var ret = hGChars.ToStringEx();

			CharsPool.Return(hGChars);

			return ret;
<# } else if (serialize.ReturnType == "byte[]") { #>
			var hGChars = CharsPool.Rent();

			<#= method_name #>(value, hGChars<#= options_parameter#>);
			
			var ret = hGChars.ToBytes(<#= encoding_name #>);

			CharsPool.Return(hGChars);

			return ret;
<# } else if (serialize.ParameterType == "out byte[]") { #>

			var hGChars = CharsPool.Rent();

			<#= method_name #>(value, hGChars<#= options_parameter#>);

			<#= serialize.ParameterName #> = hGChars.ToBytes(<#= encoding_name #>);

			CharsPool.Return(hGChars);
			
<# } else if (serialize.ParameterType == "TextWriter" && serialize.IsAsync) { #>

			var hGChars = CharsPool.Rent();

			<#= method_name #>(value, hGChars<#= options_parameter #>);

			var chars = hGChars.ToArray();
			
			CharsPool.Return(hGChars);

			await <#= serialize.ParameterName #>.WriteAsync(chars, 0, chars.Length);

<# } else if (serialize.ParameterType == "TextWriter") { #>

<#if (!serialize.IsStatic) { #>
			var options = Options;
<#}#>

			var hGChars = CharsPool.Rent();

            if ((options & ReferenceOptions) != 0)
            {
                <#= method_name #><T, JsonSerializeModes.ReferenceMode>(value, hGChars, <#= serialize.ParameterName #>, options);
            }
            else if ((options & ComplexOptions) != 0)
            {
                <#= method_name #><T, JsonSerializeModes.ComplexMode>(value, hGChars, <#= serialize.ParameterName #>, options);
            }
            else
            {
                <#= method_name #><T, JsonSerializeModes.SimpleMode>(value, hGChars, <#= serialize.ParameterName #>, options);
            }

			hGChars.WriteTo(<#= serialize.ParameterName #>);

			CharsPool.Return(hGChars);
			
<# } else if (serialize.ParameterType == "Stream"  && serialize.IsAsync) { #>

			var hGChars = CharsPool.Rent();

			<#= method_name #>(value, hGChars<#= options_parameter #>);

			var bytes = hGChars.ToBytes(<#= encoding_name #>);
			
			CharsPool.Return(hGChars);

			await <#= serialize.ParameterName #>.WriteAsync(bytes, 0, bytes.Length);

<# } else if (serialize.ParameterType == "Stream" || serialize.ParameterType == "HGlobalCache<byte>") { #>
			
			var hGChars = CharsPool.Rent();

			<#= method_name #>(value, hGChars<#= options_parameter #>);

			hGChars.WriteTo(<#= serialize.ParameterName #><#= encoding_parameter #>);

			CharsPool.Return(hGChars);
			
<# } else if (serialize.ParameterType == "HGlobalCache<char>") { #>

<#if (!serialize.IsStatic) { #>
			var options = Options;
<#}#>

            if ((options & ReferenceOptions) != 0)
            {
                <#= method_name #><T, JsonSerializeModes.ReferenceMode>(value, <#= serialize.ParameterName #>, options);
            }
            else if ((options & ComplexOptions) != 0)
            {
                <#= method_name #><T, JsonSerializeModes.ComplexMode>(value, <#= serialize.ParameterName #>, options);
            }
            else
            {
                <#= method_name #><T, JsonSerializeModes.SimpleMode>(value, <#= serialize.ParameterName #>, options);
            }
<# } #>
        }

<#= serialize.IsAsync ? "#endif" : "" #>
<# } #>
<# } #>


<# { #>

<# foreach(var deserialize in deserializes) { #>
<#= deserialize.IsCore ? "#if Span" : "" #>
<#= deserialize.IsAsync ? "#if Async" : "" #>
<# var result_type = deserialize.IsGeneric ? "T" : "object"; #>
<# var generic_parameter = deserialize.IsGeneric ? "<T>" : ""; #>
<# var non_generic_parameter_before = deserialize.IsGeneric ? "" : "type, "; #>
<# var non_generic_parameter_after = deserialize.IsGeneric ? "" : ", type"; #>
<# var options_parameter = deserialize.IsOptions ? ", options" : ""; #>
<# var parameter_list = $"{deserialize.ParameterType} {deserialize.ParameterName}"; #>
<# var method_name = "Deserialize"; #>
<# var encoding_parameter = ""; #>
<# var modifiable_check = ""; #>
<# if (deserialize.IsEncoding) { encoding_parameter = ", Encoding"; } #>
<# if (deserialize.IsEncoding && deserialize.IsStatic) { parameter_list += ", Encoding encoding"; encoding_parameter = ", encoding"; } #>
<# if (!deserialize.IsGeneric) { parameter_list += ", Type type"; }#>
<# if (deserialize.IsOptions) { parameter_list += ", JsonFormatterOptions options"; modifiable_check += "(options & JsonFormatterOptions.ModifiableDeserialize) == 0 && "; }#>
<# if (deserialize.IsAsync) { result_type = @$"async
#if ValueTask
        ValueTask<{result_type}>
#else
        Task<{result_type}>
#endif
       "; } #>
<# if (deserialize.IsStatic) { result_type = $"static {result_type}"; method_name += "Object"; }#>
        /// <summary>
        /// 将 <#= deserialize.ParameterDescription #>反序列化为指定类型的实例。
        /// </summary>
        /// <param name="<#= deserialize.ParameterName #>"><#= deserialize.ParameterDescription #></param>
<# if (deserialize.IsEncoding && deserialize.IsStatic) { #>
		/// <param name="encoding">指定编码</param>
<# } #>
<# if (deserialize.IsGeneric) { #>
		/// <typeparam name="T">指定类型</typeparam>
<# } #>
<# if (!deserialize.IsGeneric) { #>
		/// <param name="type">指定类型</param>
<# } #>
<# if (deserialize.IsOptions) { #>
		/// <param name="options">指定配置项</param>
<# } #>
        /// <returns>返回指定类型的实例</returns>
        [MethodImpl(VersionDifferences.AggressiveInlining)]
		public <#= result_type #> <#= method_name #><#= deserialize.IsAsync ? "Async" : "" #><#= deserialize.IsGeneric ? "<T>" : "" #>(<#= parameter_list #>)
		{
<# if (deserialize.ParameterType == "string" || deserialize.ParameterType == "ReadOnlySpan<char>") { #>

			unsafe
			{
				fixed (char* chars = <#= deserialize.ParameterName #>)
				{
					return <#= method_name #><#= generic_parameter #>(<#= non_generic_parameter_before #>chars, <#= deserialize.ParameterName #>.Length<#= options_parameter #>);
				}
			}
<# } else if (deserialize.ParameterType == "HGlobalCache<char>") { #>
			unsafe
			{
				return <#= method_name #><#= generic_parameter #>(<#= non_generic_parameter_before #><#= deserialize.ParameterName #>.First, <#= deserialize.ParameterName #>.Count<#= options_parameter #>);
			}
<# } else if (deserialize.ParameterType == "TextReader" && deserialize.IsAsync) { #>

			return <#= method_name #><#= generic_parameter #>(await <#= deserialize.ParameterName #>.ReadToEndAsync()<#= non_generic_parameter_after #><#= options_parameter #>);

<# } else if (deserialize.ParameterType == "Stream" && deserialize.IsAsync) { #>

			return <#= method_name #><#= generic_parameter #>(await new StreamReader(<#= deserialize.ParameterName #><#= encoding_parameter #>).ReadToEndAsync()<#= non_generic_parameter_after #><#= options_parameter #>);

<# } else if (
				deserialize.ParameterType == "HGlobalCache<byte>" || 
				deserialize.ParameterType == "ArraySegment<byte>" || 
				deserialize.ParameterType == "byte[]" || 
				deserialize.ParameterType == "ReadOnlySpan<byte>" || 
				deserialize.ParameterType == "Stream" ||
				deserialize.ParameterType == "TextReader"
				) { #>
			var hGChars = CharsPool.Rent();

			hGChars.ReadFrom(<#= deserialize.ParameterName #><#= encoding_parameter #>);

			var value = <#= method_name #><#= generic_parameter #>(hGChars<#= non_generic_parameter_after #><#= options_parameter #>);

			CharsPool.Return(hGChars);

			return value;
<# } #>

		}
		
<#= deserialize.IsAsync ? "#endif" : "" #>
<#= deserialize.IsCore ? "#endif" : "" #>
<# } #>
<# } #>
	





<# { #>

<# foreach(var deserializeto in deserializetos) { #>
<#= deserializeto.IsCore ? "#if Span" : "" #>
<#= deserializeto.IsAsync ? "#if Async" : "" #>

<# var parameters_list = $"{deserializeto.ParameterType} {deserializeto.ParameterName}"; #>
<# var method_name = "DeserializeTo"; #>
<# var encoding_parameter = ""; #>
<# if (deserializeto.IsEncoding) { encoding_parameter = ", Encoding"; } #>

        /// <summary>
        /// 将 <#= deserializeto.ParameterDescription #>反序列化到指定的数据写入器中。
        /// </summary>
        /// <param name="<#= deserializeto.ParameterName #>"><#= deserializeto.ParameterDescription #></param>
<# if (deserializeto.IsEncoding && deserializeto.IsStatic) { parameters_list += ", Encoding encoding"; encoding_parameter = ", encoding"; #>
		/// <param name="encoding">指定编码</param>
<# } #>
        /// <param name="dataWriter">数据写入器</param>
<# parameters_list += ", IDataWriter dataWriter"; #>
        public <#= deserializeto.IsAsync ? @"async
#if ValueTask
        ValueTask
#else
        Task
#endif
	   " : "void" #> <#= method_name #><#= deserializeto.IsAsync ? "Async" : "" #>(<#= parameters_list #>)
        {
<# if (deserializeto.ParameterType == "string" || deserializeto.ParameterType == "ReadOnlySpan<char>") { #>
			unsafe
			{
				fixed (char* chars = <#= deserializeto.ParameterName #>)
				{
					<#= method_name #>(chars, <#= deserializeto.ParameterName #>.Length, dataWriter);
				}
			}
<# } else if (deserializeto.ParameterType == "TextReader" && deserializeto.IsAsync) { #>

			<#= method_name #>(await <#= deserializeto.ParameterName #>.ReadToEndAsync(), dataWriter);

<# } else if (deserializeto.ParameterType == "Stream" && deserializeto.IsAsync) { #>

			<#= method_name #>(await new StreamReader(<#= deserializeto.ParameterName #><#= encoding_parameter #>).ReadToEndAsync(), dataWriter);

<# } else if (
				deserializeto.ParameterType == "HGlobalCache<byte>" || 
				deserializeto.ParameterType == "ArraySegment<byte>" || 
				deserializeto.ParameterType == "byte[]" || 
				deserializeto.ParameterType == "ReadOnlySpan<byte>" || 
				deserializeto.ParameterType == "Stream" ||
				deserializeto.ParameterType == "TextReader"
			 ) { #>
			var hGChars = CharsPool.Rent();

			hGChars.ReadFrom(<#= deserializeto.ParameterName #><#= encoding_parameter #>);

			<#= method_name #>(hGChars, dataWriter);

			CharsPool.Return(hGChars);
<# } else if (deserializeto.ParameterType == "HGlobalCache<char>") { #>
			unsafe
			{
				<#= method_name #>(<#= deserializeto.ParameterName #>.First, <#= deserializeto.ParameterName #>.Count, dataWriter);
			}
<# } #>
        }
		
<#= deserializeto.IsAsync ? "#endif" : "" #>
<#= deserializeto.IsCore ? "#endif" : "" #>
<# } #>
<# } #>
	}
}